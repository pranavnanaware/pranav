{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import remarkGfm from \"remark-gfm\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport { makeSource, defineDatabase } from \"contentlayer-source-notion\";\nimport { Client } from \"@notionhq/client\";\n\nconst client = new Client({ auth: process.env.NOTION_SECRET });\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  path: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slug: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n};\n\nexport const Blog = defineDatabase(() => ({\n  name: \"Blog\",\n  databaseId: process.env.NOTION_DATABASE_ID,\n  contentType: \"mdx\",\n\n  fields: {\n    published: {\n      type: \"boolean\",\n    },\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n    },\n    url: {\n      type: \"string\",\n    },\n    repository: {\n      type: \"string\",\n    },\n  },\n  computedFields,\n}));\n\n// export const Page = defineDocumentType(() => ({\n//   name: \"Page\",\n//   filePathPattern: \"pages/**/*.mdx\",\n//   contentType: \"mdx\",\n//   fields: {\n//     title: {\n//       type: \"string\",\n//       required: true,\n//     },\n//     description: {\n//       type: \"string\",\n//     },\n//   },\n//   computedFields,\n// }));\n\nexport default makeSource({\n  client,\n  databaseTypes: [Blog],\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: \"github-dark\",\n          onVisitLine(node) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }];\n            }\n          },\n          onVisitHighlightedLine(node) {\n            node.properties.className.push(\"line--highlighted\");\n          },\n          onVisitHighlightedWord(node) {\n            node.properties.className = [\"word--highlighted\"];\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"subheading-anchor\"],\n            ariaLabel: \"Link to section\",\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": ";AAAA,OAAO,eAAe;AACtB,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,SAAS,YAAY,sBAAsB;AAC3C,SAAS,cAAc;AAEvB,IAAM,SAAS,IAAI,OAAO,EAAE,MAAM,QAAQ,IAAI,cAAc,CAAC;AAG7D,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AACF;AAEO,IAAM,OAAO,eAAe,OAAO;AAAA,EACxC,MAAM;AAAA,EACN,YAAY,QAAQ,IAAI;AAAA,EACxB,aAAa;AAAA,EAEb,QAAQ;AAAA,IACN,WAAW;AAAA,MACT,MAAM;AAAA,IACR;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,IACR;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,IACR;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAkBF,IAAO,8BAAQ,WAAW;AAAA,EACxB;AAAA,EACA,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,YAAY,MAAM;AAGhB,gBAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,mBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,uBAAuB,MAAM;AAC3B,iBAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,UACpD;AAAA,UACA,uBAAuB,MAAM;AAC3B,iBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,UAClD;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,mBAAmB;AAAA,YAC/B,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
